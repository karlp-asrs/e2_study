(1.065^10)/(1.072^10)
(1.086^5)/(1.078^5)
1/1.038
106/115
(1.075^10)/(1.085^10)
(1.075^100)/(1.085^100)
1.075/1.085
.13*5/6
.13*1/6
get_all_vars()
Sys.getenv()
cat $(which R)
which(R)
Sys.getenv("HOME")
Sys.getenv("R_HOME")
library(devtools)
install_github("https://github.com/karlp-asrs/asrsMethods/asrsMethods")
install.github("asrsMethods/asrsMethods","karlp-asrs")
install_github("asrsMethods/asrsMethods","karlp-asrs")
install_github("karlp-asrs/asrsMethods/asrsMethods")
library(asrsMethods)
?pestats
install_github("karlp-asrs/asrsMethods/asrsPalettes")
install_github("karlp-asrs/asrsMethods/asrsPalettes")
install_github("karlp-asrs/asrsMethods/asrsCode")
.libPaths()
isaa=c(.1182, .1696, .1911, .033, .0323, .1549, .0271, .0595, .1212, 0)
isaa*40251.9
4757-3862
isaa*39710
4693.7-3862
isaa
isaa*40251
6.3/10.5
data=rnorm(1000)
data=rnorm(1000)
mean(data)
data=rnorm(1000,.01,.04)
d=sample(data,12)
d
#what is estimate of mean
#approach 1
mean(data)*12
m=vector()
for(i in 1:1000) {
d=sample(data,12)
m[i]=sum(d)
}
length(m)
boxplot(m)
source('~/.active-rstudio-document')
2000^.333
20000
20000^.33
library(Rbbg)
v=c(1,2,3,4)
lag(v,1)
v/lag(v,1)
?lag
lag(v)
lag(v,2)
library(asrsPalettes)
IMD.palette()
display.palette(IMD.palette())
250e6*.02
250e6*.02/365
te=c(2,350,970,4,5,0,465,0,0,705,600)
tw=c(.125,.08,.115,.055,.055,.2,.065,.045,.075,.025,.16)
te%*%tw
library(lubridate)
library(xtable)
8.3+108.2+87.1+29.3+57.8
1.11^6
.6*6
.006*6
1.06^6
1.8704-.036-1.4185
.4159*.15
.4159-.062385
1.3535^(1/6)
.3535+1.4185
1.772^(1/6)
(1.1^1:10)-(1.08^1:10)
1.1^5
1.08^5
1.1^1:10
1.1^(1:10)
(1.1^(1:10))-(1.08^(1:10))
(1.1^(1:10))-(1.08^(1:10))+1
((1.1^(1:10))-(1.08^(1:10))+1)^(1/(1:10))-1
1.11^6
1.06^6
1.87-1.42
.15*.45
1.87-.07
1.8^(1/6)
.85*.11
1.0935^6
95/1094
(.95*.001)/((.95*.001)+(.1*.999))
8*5/2
40/3
(40/3)+(2/3*40/3)
13.33333+(2*13.33333/3)
8*5/3
40/3
1.14^(1:10)
gross=1.14^(1:10)
net=1.12^(1:10)
bench=1.08^(1:10)
fee=gross-net
excessreturn=net-bench
effectiveness=excessreturn/fee
effectiveness
exceswwsreturn
excessreturn
fee
grossprofit=gross-bench
fee/grossprofit
knitr::opts_chunk$set(echo = TRUE)
year=1:10
gross=1.14^year  #14% gross return compounded
net=1.12^year #12% net return compounded
bench=1.08^year #8% bench compounded
fee=gross-net
excessreturn=net-bench
effectiveness=excessreturn/fee
grossprofit=gross-bench
slicetogp=fee/grossprofit
df=data.frame(year,gross,net,bench,fee,effectiveness,slicetogp)
library(tidyr)
dflong=gather(df,eff,value)
dflong
dflong=gather(df,eff,value,gross:slicetogp)
dflong
dflong=gather(df[,c(year,effectiveness,slicetogp)],eff,value,effectiveness:slicetogp)
dflong=gather(df[,c("year","effectiveness","slicetogp")],eff,value,effectiveness:slicetogp)
dflong
ggplot(dflong,aes(x=year,y=value,group=eff,color=eff)) + geom_line()
library(ggplot2)
ggplot(dflong,aes(x=year,y=value,group=eff,color=eff)) + geom_line()
ggplot(df,aes(x=year,y=effectiveness) + geom_line()
ggplot(df,aes(x=year,y=effectiveness)) + geom_line()
knitr::opts_chunk$set(echo = TRUE)
slice_to_gp=sequence(.1,.9,.01)
help(sequence)
help(seq)
slice_to_gp=seq.1,.9,.01)
slice_to_gp=seq(.1,.9,.01)
head(slice_to_gp)
library(Deriv)
f=function(x) (x-1)/x
f2=Deriv(f)
f2
f2(3)
f=function(x) (1-x)/x
f2=Deriv(f)
f
f2
f3=Deriv(f2)
f3
Deriv(function(x) 1/x)
Deriv(function(x) (1-x)/x)
library(devtoools)
library(devtools)
install_github("karlp-asrs/asrsMethods/asrsMethods")
install.packages(c("callr", "caTools", "dplyr", "dtplyr", "ECOSolveR", "evaluate", "forcats", "formatR", "ggsignif", "ggthemes", "git2r", "gmp", "gtable", "haven", "highr", "httpuv", "jrvFinance", "kableExtra", "lazyeval", "modelr", "openssl", "pkgbuild", "polynom", "PortfolioOptim", "purrr", "quantmod", "R.utils", "R6", "Rblpapi", "Rcpp", "RCurl", "readxl", "registry", "rgl", "Rglpk", "rJava", "rlang", "rmarkdown", "Rmpfr", "robustbase", "ROI", "ROI.models.miplib", "ROI.models.netlib", "ROI.plugin.nloptr", "ROI.plugin.optimx", "ROI.plugin.scs", "rstudioapi", "scs", "slam", "stringi", "stringr", "tibble", "tidyr", "XML", "zoo"))
install.packages(c("rJava", "rlang"))
install.packages(c("rJava", "rlang"))
install.packages(c("rJava", "rlang"))
install.packages("rlang")
install.packages("rlang")
library(devtools)
install_github("karlp-asrs/asrsMethods/asrsMethods")
library(asrsMethods)
20000/33.33
25/.7
20/.6
14/33
as.matrix(c(1,1,1))
library(tidyr)
library(fBasics)
library(ggplot2)
library(knitr)
data=read.csv("asset_returns.csv")
data$Date=as.Date(data$Date,format="%m/%d/%Y")
data=data[,-1]
data$A=data$A-(.02/12)
data$B=data$B-(.003/12)
data$C=data$C-(.01/12)
mystery=data[,c("Date","A","B","C")]
assets=data[,-2:-4]
mysterylong=gather(mystery,"Portfolio","Return",-Date)
assetslong=gather(assets,"Asset_Class","Return",-Date)
wmat=data.frame(Eq_wgt=c(1,1,1)/3,Min_var=c(NA,NA,NA),Tang=c(NA,NA,NA))
portnames=c("A","B","C")
rownames(wmat)=portnames
kable(wmat)
ones=as.matrix(c(1,1,1))
covmat=cov(mystery[,-1])
icovmat=solve(covmat)
minport=(icovmat%*%ones)/as.vector(t(ones)%*%icovmat%*%ones)
ervec=apply(mystery[,-1],2,mean)
tanport=as.vector(icovmat%*%(ervec-mean(assets$Cash)))
tanport=tanport/sum(tanport)
wmat$Min_var=minport
wmat$Tang=tanport
kable(wmat)
mystery$Eq_wgt=myster[,c(2,3,4)]%*%wmat$Eq_wgt
mystery$Eq_wgt=mystery[,c(2,3,4)]%*%wmat$Eq_wgt
mystery[,c(2,3,4)]
mystery$Eq_wgt=mystery[,c(2,3,4)]%*%as.matrix(wmat$Eq_wgt)
mystery$Eq_wgt=as.matrix(mystery[,c(2,3,4)])%*%as.matrix(wmat$Eq_wgt)
head(mystery)
(.01999+.00215+.02067)/3
wmat$Eq_wgt
sum(mystery[1,c(2,3,4)])
sum(mystery[1,c(2,3,4)])/3
wmat$Tang
wmat$Tang%*%covmat%*%wmat$Tang
sqrt(wmat$Tang%*%covmat%*%wmat$Tang)
sd(mystery$Tang)
myster$Tang
mystery$Tang
mystery$Eq_wgt=as.matrix(mystery[,c(2,3,4)])%*%as.matrix(wmat$Eq_wgt)
mystery$Min_var=as.matrix(mystery[,c(2,3,4)])%*%as.matrix(wmat$Min_var)
mystery$Tang=as.matrix(mystery[,c(2,3,4)])%*%as.matrix(wmat$Tang)
sd(mystery$Tang)
p13=function(x) {
ans=vector()
ans[1]=pnorm(0,-1+((1+mean(x))^2-sd(x)^2)^6,sd(x)*sqrt(12))
ans[2]=pnorm(0,-1+((1+mean(x))^2-sd(x)^2)^18,sd(x)*sqrt(36))
}
lapply(mystery[,-1],p13)
p13=function(x) {
ans=vector()
ans[1]=pnorm(0,-1+((1+mean(x))^2-sd(x)^2)^6,sd(x)*sqrt(12))
ans[2]=pnorm(0,-1+((1+mean(x))^2-sd(x)^2)^18,sd(x)*sqrt(36))
ans
}
lapply(mystery[,-1],p13)
pmat=data.frame(lapply(mystery[,-1],p13))
kable(pmat)
rownames(pmat)=c("Pval_1yr","Pval_3yr")
kable(pmat,digits=2)
pboot13=function(x) {
yr1vec=yr3vec=ans=vector()
for(i in 1:1000) {
s1=x[sample(1:60,12,replace=TRUE)]
s1ret=-1+prod(1+s1)
yr1vec[i]=0>s1ret
s3=x[sample(1:60,36,replace=TRUE)]
s3ret=-1+prod(1+s3)
yr3vec[i]=0>s3ret
}
ans[1]=sum(yr1vec)/1000
ans[3]=sum(yr3vec)/1000
}
pbmat=data.frame(lapply(mystery[,-1],pboot13))
rownames(pmat)=c("Pval_1yr","Pval_3yr")
kable(pmat,digits=2)
rownames(pbmat)=c("Pval_1yr","Pval_3yr")
pboot13=function(x) {
yr1vec=yr3vec=ans=vector()
for(i in 1:1000) {
s1=x[sample(1:60,12,replace=TRUE)]
s1ret=-1+prod(1+s1)
yr1vec[i]=0>s1ret
s3=x[sample(1:60,36,replace=TRUE)]
s3ret=-1+prod(1+s3)
yr3vec[i]=0>s3ret
}
ans[1]=sum(yr1vec)/1000
ans[2]=sum(yr3vec)/1000
}
pbmat=data.frame(lapply(mystery[,-1],pboot13))
rownames(pbmat)=c("Pval_1yr","Pval_3yr")
pbmat
pboot13=function(x) {
yr1vec=yr3vec=ans=vector()
for(i in 1:1000) {
s1=x[sample(1:60,12,replace=TRUE)]
s1ret=-1+prod(1+s1)
yr1vec[i]=0>s1ret
s3=x[sample(1:60,36,replace=TRUE)]
s3ret=-1+prod(1+s3)
yr3vec[i]=0>s3ret
}
ans[1]=sum(yr1vec)/1000
ans[2]=sum(yr3vec)/1000
ans
}
pbmat=data.frame(lapply(mystery[,-1],pboot13))
rownames(pbmat)=c("Pval_1yr","Pval_3yr")
kable(pbmat,digits=2)
head(assets)
market=assets[,c(-1,-2)]%*%as.matrix(c(.55,.4,.05))
market=as.matrix(assets[,-1])%*%as.matrix(c(-1,.55,.4,.05))
market=as.matrix(assets[,-1])%*%as.matrix(c(-1,.55,.4,.05))
capm=function(x) {
ans=lm((x-assets$Cash)~market)
summary(ans)
}
lapply(mystery[,-1],capm)
multi=function(x) {
ans=lm(x~assets$Cash+assets$Stocks+assets$Bonds+assets$Commodities)
summary(ans)
}
lapply(mystery[,-1],multi)
multi
multi(as.matrix(assets[,-1])%*%as.matrix(c(.2,.8,0,0)))
setwd("~/R/r default working directory")
knitr::opts_chunk$set(echo = TRUE)
e2=read.csv(e2_returns.csv)
e2=read.csv("e2_returns.csv")
setwd("C:/Users/KarlP/e2_study")
e2=read.csv("e2_returns.csv")
head(e2)
library(ggplot2)
library(tseries)
library(zoo)
e2z=zoo(e2$Excess,e2$Date)
help(rollapply)
e2zroll1=rollapply(e2z,12,sum,align="right")
plot(e1zroll1)
plot(e2zroll1)
head(e2zroll1)
head(e2z)
e2=read.csv("e2_returns.csv")
e2$Date=as.Date(e2$Date,format="%m/%d/%Y")
e2z=zoo(e2$Excess,e2$Date)
e2zroll1=rollapply(e2z,12,sum,align="right")
plot(e2zroll1)
plot(e2z)
ggplot(e2,aes(x=Date,y=Excess))+geom_line()
ggplot(e2,aes(x=Date,y=Excess*100))+geom_line()+ylab("Excess return (bp)")
ggplot(e2,aes(y=Excess*100))+geom_box()+ylab("Excess return (bp)")
ggplot(e2,aes(y=Excess*100))+geom_boxplot()+ylab("Excess return (bp)")
library(lubridate)
head(year(e2$Date))
head(e2)
tail(e2)
